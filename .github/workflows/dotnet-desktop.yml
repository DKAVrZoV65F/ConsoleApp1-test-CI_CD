name: CI/CD Server ðŸ§ªðŸš€

on:
  push:
    branches: [ "master" ]
    paths-ignore:
      - '**/*.md'
      - '**/*.gitignore'
      - '**/*.gitattributes'
  pull_request:
    branches: [ "master" ]
  workflow_dispatch:

jobs:
  build:
    name: Build the app
    runs-on: ubuntu-latest

    steps:
    - name: Checkout source code
      uses: actions/checkout@v4.1.1
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v4.0.0
      with:
        dotnet-version: 8.0.x
    
    - name: Restore dependencies
      run: dotnet restore
    
    - name: Build
      run: dotnet build -c release --no-restore
      
    - name: Upload a Build Artifact
      uses: actions/upload-artifact@v4.3.0
      with:
        # Artifact name
        name: GitHubActionsHelloWorldConsoleDownloadableArtifact #.zip will be added automatically
        run: |
          pwd
          ls
          ls -la
        path: bin\release\net8.0\publish\*.*
# env:
#   DOTNET_NOLOGO: true                     # Disable the .NET logo
#   DOTNET_SKIP_FIRST_TIME_EXPERIENCE: true # Disable the .NET first time experience
#   DOTNET_CLI_TELEMETRY_OPTOUT: true       # Disable sending .NET CLI telemetry
#   DOTNET_VERSION: '8.0.x'                 # Version .NET
#   DOTNET_INSTALL_DIR: '.\.dotnet'
#   DOTNET_DEPENDENCIES_DIR: '~/.nuget/packages'

# concurrency:
#   group: CI/CD-Server-ðŸ§ªðŸš€
#   cancel-in-progress: true
# jobs:
#   CI:
#     continue-on-error: false
#     strategy:
#       matrix:
#         os: [ ubuntu-latest, macos-latest ]
#       fail-fast: false
#       max-parallel: 1
#     runs-on: ${{ matrix.os }}
#     steps:
#     - uses: actions/checkout@v4.1.1
#     - name: Cache .NET ðŸ“¦
#       id: cache-dotnet
#       uses: actions/cache@v4.0.1
#       with:
#         path: ${{ env.DOTNET_INSTALL_DIR }}
#         key: ${{ runner.os }}-dotnet-8
#         restore-keys: ${{ runner.os }}-dotnet-8
        
#     - name: Display Cache .NET ðŸ“¦
#       run: echo '${{ toJSON(steps.cache-dotnet.outputs) }}'
#     - name: Setup .NET ðŸ“¦
#       if: ${{ steps.cache-dotnet.outputs.cache-hit != 'true' }}
#       uses: actions/setup-dotnet@v4.0.0
#       with:
#         dotnet-version: ${{ env.DOTNET_VERSION }}
        
#     # - name: Restore dependencies
#     #   run: dotnet restore
    
#     - name: Build ðŸ§±
#       run: dotnet build -c release

#   CD:
#     needs: CI
#     continue-on-error: false
#     strategy:
#       matrix:
#         os: [ ubuntu-latest, macos-latest ]
#       fail-fast: false
#       max-parallel: 1
#     runs-on: ${{ matrix.os }}
#     steps:
#     - uses: actions/checkout@v4.1.1
#     - name: Cache .NET ðŸ“¦
#       id: cache-dotnet
#       uses: actions/cache@v4.0.1
#       with:
#         path: ${{ env.DOTNET_INSTALL_DIR }}
#         key: ${{ runner.os }}-dotnet-8
#         restore-keys: ${{ runner.os }}-dotnet-8
        
#     - name: Display Cache .NET ðŸ“¦
#       run: echo '${{ toJSON(steps.cache-dotnet.outputs) }}'
#     - name: Setup .NET ðŸ“¦
#       if: ${{ steps.cache-dotnet.outputs.cache-hit != 'true' }}
#       uses: actions/setup-dotnet@v4.0.0
#       with:
#         dotnet-version: ${{ env.DOTNET_VERSION }}
        
#     # - name: Restore dependencies
#     #   run: dotnet restore
    
#     - name: Build ðŸ§±
#       run: dotnet build -c release
        
#     - name: Upload Artifact ðŸš€
#       uses: actions/upload-artifact@v4.3.0
#       with:
#         name: Server-Build-${{ matrix.os }}
#         path: bin/Release/net8.0/publish/*.*
#         reporter: dotnet-trx
#         fail-on-error: true        

